import streamlit as st
from langchain_openai import AzureChatOpenAI
from langchain.vectorstores import Chroma
with open(r'config.json') as config_file
    config_details=json.load(config_file)

llm= AzureChatOpenAI(
    api_version="",
    api_key="",
    model="",
    azure_endpoint=""
)

# loading PDF, DOCX and TXT files as LangChain Documents
def loadpdf(file):
    import os
    name, extension = os.path.splitext(file)

    if extension == '.pdf':
        from langchain.document_loaders import PyPDFLoader
        print(f'Loading {file}')
        loader = PyPDFLoader(file)
    else:
        print('Document format is not supported!')
        return None

    data = loader.load()
    return data


# splitting data in chunks
def chunk_data(data, chunk_size=256, chunk_overlap=20):
    from langchain.text_splitter import RecursiveCharacterTextSplitter
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)
    chunks = text_splitter.split_documents(data)
    return chunks


# create embeddings using OpenAIEmbeddings() and save them in a Chroma vector store
def create_embeddings(chunks):
    from langchain.vectorstores import Chroma
    from langchain_openai.embeddings import AzureOpenAIEmbeddings
    embeddings = AzureOpenAIEmbeddings(
            api_version="",
            api_key="",
            model="",
            azure_endpoint=""
    )
    vector_store = Chroma.from_documents(chunks, embeddings)
    return vector_store


def ask_and_get_answer(vector_store, q, k=3):
    from langchain.chains import RetrievalQA
    
    retriever = vector_store.as_retriever(search_type='similarity', search_kwargs={'k': k})
    chain = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever)

    answer = chain.run(q)
    return answer

data="dat.pdf"
vector_store = create_embedding(chunk_data(data))
answer = ask_and_get_answer(vector_store,question,k)
